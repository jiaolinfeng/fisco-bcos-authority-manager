package com.esunny.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Address;
import org.bcos.web3j.abi.datatypes.DynamicArray;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class GroupFactory extends Contract {
    private static String BINARY = "6060604052341561000c57fe5b5b600080548060010182816100219190610094565b916000526020600020900160005b6100376100c0565b809050604051809103906000f080151561004d57fe5b909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b6100f5565b8154818355818115116100bb578183600052602060002091820191016100ba91906100d0565b5b505050565b604051610c0f8061113983390190565b6100f291905b808211156100ee5760008160009055506001016100d6565b5090565b90565b611035806101046000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806321cd3cae1461005c578063ad321f3c146100d1578063ae025faa14610123578063ceb6065414610175575bfe5b341561006457fe5b61006c6101d5565b60405180806020018281038252838181518152602001915080519060200190602002808383600083146100be575b8051825260208311156100be5760208201915060208101905060208303925061009a565b5050509050019250505060405180910390f35b34156100d957fe5b6100e161026a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012b57fe5b6101336102af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561017d57fe5b610193600480803590602001909190505061033f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101dd610385565b600080548060200260200160405190810160405280929190818152602001828054801561025f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610215575b505050505090505b90565b60006000600081548110151561027c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b600060006102bb610399565b809050604051809103906000f08015156102d157fe5b9050600080548060010182816102e791906103a9565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508091505b5090565b600060008281548110151561035057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b602060405190810160405280600081525090565b604051610c0f806103fb83390190565b8154818355818115116103d0578183600052602060002091820191016103cf91906103d5565b5b505050565b6103f791905b808211156103f35760008160009055506001016103db565b5090565b90560060606040526000600160006101000a81548160ff0219169083151502179055506000600160016101000a81548160ff021916908315150217905550341561004257fe5b5b5b5b610bbb806100546000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063045894ab146100a45780632150c518146100ce5780633a50f68b14610143578063644d8164146101ee5780637dab61b6146102875780638586b2f0146102a95780639614c7691461033a578063c878851d14610394578063e7d66cac146103b6578063ee6d84c51461047d575bfe5b34156100ac57fe5b6100b46104a7565b604051808215151515815260200191505060405180910390f35b34156100d657fe5b6100de6104bf565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610130575b8051825260208311156101305760208201915060208101905060208303925061010c565b5050509050019250505060405180910390f35b341561014b57fe5b610165600480803560001916906020019091905050610522565b60405180806020018281038252838181518152602001915080519060200190808383600083146101b4575b8051825260208311156101b457602082019150602081019050602083039250610190565b505050905090810190601f1680156101e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f657fe5b6101fe610631565b604051808060200182810382528381815181526020019150805190602001908083836000831461024d575b80518252602083111561024d57602082019150602081019050602083039250610229565b505050905090810190601f1680156102795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028f57fe5b6102a7600480803515159060200190919050506106da565b005b34156102b157fe5b610320600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106f8565b604051808215151515815260200191505060405180910390f35b341561034257fe5b610392600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610841565b005b341561039c57fe5b6103b46004808035151590602001909190505061085c565b005b34156103be57fe5b61047b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035151590602001909190505061087a565b005b341561048557fe5b61048d610a59565b604051808215151515815260200191505060405180910390f35b6000600160009054906101000a900460ff1690505b90565b6104c7610a71565b600380548060200260200160405190810160405280929190818152602001828054801561051757602002820191906000526020600020905b815460001916815260200190600101908083116104ff575b505050505090505b90565b61052a610a85565b60006000836000191660001916815260200190815260200160002060009054906101000a900460ff1615610613576004600083600019166000191681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b5050505050905061062c565b6020604051908101604052806000815250905061062c565b5b919050565b610639610a85565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106cf5780601f106106a4576101008083540402835291602001916106cf565b820191906000526020600020905b8154815290600101906020018083116106b257829003601f168201915b505050505090505b90565b80600160016101000a81548160ff0219169083151502179055505b50565b6000600060028484600060405160200152604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b6020831061077d578051825260208201915060208101905060208303925061075a565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060206040518083038160008661646e5a03f115156107bd57fe5b5050604051805190509050600160019054906101000a900460ff161561080e5760006000826000191660001916815260200190815260200160002060009054906101000a900460ff1615915061083a565b60006000826000191660001916815260200190815260200160002060009054906101000a900460ff1691505b5092915050565b8060029080519060200190610857929190610a99565b505b50565b80600160006101000a81548160ff0219169083151502179055505b50565b60006000600060028787600060405160200152604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b6020831061090157805182526020820191506020810190506020830392506108de565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060206040518083038160008661646e5a03f1151561094157fe5b50506040518051905092508315610a1c5760009150600090505b6003805490508110156109ad57826000191660038281548110151561097c57fe5b906000526020600020900160005b505460001916141561099f57600191506109ad565b5b808060010191505061095b565b600015158215151415610a1b57600380548060010182816109ce9190610b19565b916000526020600020900160005b8590919091509060001916905550846004600085600019166000191681526020019081526020016000209080519060200190610a19929190610a99565b505b5b8360006000856000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505050505050565b6000600160019054906101000a900460ff1690505b90565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ada57805160ff1916838001178555610b08565b82800160010185558215610b08579182015b82811115610b07578251825591602001919060010190610aec565b5b509050610b159190610b45565b5090565b815481835581811511610b4057818360005260206000209182019101610b3f9190610b6a565b5b505050565b610b6791905b80821115610b63576000816000905550600101610b4b565b5090565b90565b610b8c91905b80821115610b88576000816000905550600101610b70565b5090565b905600a165627a7a72305820d87385b962f49e37fd2b749a3d1dcf90d89822201fb7887d816a8b31b944a0410029a165627a7a723058204914559c276767c54032fd7994a47a6a050f2e9b7329e37ee629d98bbba8e216002960606040526000600160006101000a81548160ff0219169083151502179055506000600160016101000a81548160ff021916908315150217905550341561004257fe5b5b5b5b610bbb806100546000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063045894ab146100a45780632150c518146100ce5780633a50f68b14610143578063644d8164146101ee5780637dab61b6146102875780638586b2f0146102a95780639614c7691461033a578063c878851d14610394578063e7d66cac146103b6578063ee6d84c51461047d575bfe5b34156100ac57fe5b6100b46104a7565b604051808215151515815260200191505060405180910390f35b34156100d657fe5b6100de6104bf565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610130575b8051825260208311156101305760208201915060208101905060208303925061010c565b5050509050019250505060405180910390f35b341561014b57fe5b610165600480803560001916906020019091905050610522565b60405180806020018281038252838181518152602001915080519060200190808383600083146101b4575b8051825260208311156101b457602082019150602081019050602083039250610190565b505050905090810190601f1680156101e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f657fe5b6101fe610631565b604051808060200182810382528381815181526020019150805190602001908083836000831461024d575b80518252602083111561024d57602082019150602081019050602083039250610229565b505050905090810190601f1680156102795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028f57fe5b6102a7600480803515159060200190919050506106da565b005b34156102b157fe5b610320600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106f8565b604051808215151515815260200191505060405180910390f35b341561034257fe5b610392600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610841565b005b341561039c57fe5b6103b46004808035151590602001909190505061085c565b005b34156103be57fe5b61047b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035151590602001909190505061087a565b005b341561048557fe5b61048d610a59565b604051808215151515815260200191505060405180910390f35b6000600160009054906101000a900460ff1690505b90565b6104c7610a71565b600380548060200260200160405190810160405280929190818152602001828054801561051757602002820191906000526020600020905b815460001916815260200190600101908083116104ff575b505050505090505b90565b61052a610a85565b60006000836000191660001916815260200190815260200160002060009054906101000a900460ff1615610613576004600083600019166000191681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b5050505050905061062c565b6020604051908101604052806000815250905061062c565b5b919050565b610639610a85565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106cf5780601f106106a4576101008083540402835291602001916106cf565b820191906000526020600020905b8154815290600101906020018083116106b257829003601f168201915b505050505090505b90565b80600160016101000a81548160ff0219169083151502179055505b50565b6000600060028484600060405160200152604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b6020831061077d578051825260208201915060208101905060208303925061075a565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060206040518083038160008661646e5a03f115156107bd57fe5b5050604051805190509050600160019054906101000a900460ff161561080e5760006000826000191660001916815260200190815260200160002060009054906101000a900460ff1615915061083a565b60006000826000191660001916815260200190815260200160002060009054906101000a900460ff1691505b5092915050565b8060029080519060200190610857929190610a99565b505b50565b80600160006101000a81548160ff0219169083151502179055505b50565b60006000600060028787600060405160200152604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b6020831061090157805182526020820191506020810190506020830392506108de565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060206040518083038160008661646e5a03f1151561094157fe5b50506040518051905092508315610a1c5760009150600090505b6003805490508110156109ad57826000191660038281548110151561097c57fe5b906000526020600020900160005b505460001916141561099f57600191506109ad565b5b808060010191505061095b565b600015158215151415610a1b57600380548060010182816109ce9190610b19565b916000526020600020900160005b8590919091509060001916905550846004600085600019166000191681526020019081526020016000209080519060200190610a19929190610a99565b505b5b8360006000856000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505050505050565b6000600160019054906101000a900460ff1690505b90565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ada57805160ff1916838001178555610b08565b82800160010185558215610b08579182015b82811115610b07578251825591602001919060010190610aec565b5b509050610b159190610b45565b5090565b815481835581811511610b4057818360005260206000209182019101610b3f9190610b6a565b5b505050565b610b6791905b80821115610b63576000816000905550600101610b4b565b5090565b90565b610b8c91905b80821115610b88576000816000905550600101610b70565b5090565b905600a165627a7a72305820d87385b962f49e37fd2b749a3d1dcf90d89822201fb7887d816a8b31b944a0410029";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"getAllGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]";

    private GroupFactory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, isInitByName);
    }

    private GroupFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, isInitByName);
    }

    private GroupFactory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    private GroupFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public Future<DynamicArray<Address>> getAllGroups() {
        Function function = new Function("getAllGroups", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> getBaseGroup() {
        Function function = new Function("getBaseGroup", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> newGroup() {
        Function function = new Function("newGroup", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void newGroup(TransactionSucCallback callback) {
        Function function = new Function("newGroup", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<Address> getGroup(Uint256 index) {
        Function function = new Function("getGroup", 
                Arrays.<Type>asList(index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<GroupFactory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(GroupFactory.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<GroupFactory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(GroupFactory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static GroupFactory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GroupFactory(contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    public static GroupFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GroupFactory(contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public static GroupFactory loadByName(String contractName, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GroupFactory(contractName, web3j, credentials, gasPrice, gasLimit, true);
    }

    public static GroupFactory loadByName(String contractName, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GroupFactory(contractName, web3j, transactionManager, gasPrice, gasLimit, true);
    }
}
